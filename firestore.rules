rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user has access to a canvas
    function hasCanvasAccess(canvasId) {
      let canvasDoc = get(/databases/$(database)/documents/canvases/$(canvasId));
      return request.auth.uid == canvasDoc.data.ownerId || 
             request.auth.uid in canvasDoc.data.collaborators;
    }
    
    // Helper function to check if user is canvas owner
    function isCanvasOwner(canvasId) {
      let canvasDoc = get(/databases/$(database)/documents/canvases/$(canvasId));
      return request.auth.uid == canvasDoc.data.ownerId;
    }
    
    // Helper function to check if user has access to a project (for backward compatibility)
    function hasProjectAccess(projectId) {
      let projectDoc = get(/databases/$(database)/documents/projects/$(projectId));
      return request.auth.uid == projectDoc.data.ownerId || 
             request.auth.uid in projectDoc.data.collaborators;
    }
    
    // Helper function to check if user owns a project
    function ownsProject(projectId) {
      let projectDoc = get(/databases/$(database)/documents/projects/$(projectId));
      return request.auth.uid == projectDoc.data.ownerId;
    }
    
    // Users can only read and write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Allow list/query for all authenticated users (needed for invites by email)
      allow list: if request.auth != null;
    }
    
    // Projects - users can manage their own projects and access shared projects
    match /projects/{projectId} {
      // Allow create - user becomes owner
      allow create: if request.auth != null 
        && request.resource.data.ownerId == request.auth.uid;
        
      // Allow read if user has access (owner or collaborator)
      allow read: if request.auth != null && hasProjectAccess(projectId);
      
      // Allow list/query for projects owned by or shared with the user
      allow list: if request.auth != null && (
        resource.data.ownerId == request.auth.uid ||
        request.auth.uid in resource.data.collaborators
      );
        
      // Allow update only by project owner
      allow update: if request.auth != null && ownsProject(projectId);
        
      // Allow delete only by project owner
      allow delete: if request.auth != null && ownsProject(projectId);
    }
    
    // Canvases - canvas-based access control
    match /canvases/{canvasId} {
      // Allow create - user becomes owner and must initialize collaborators array
      allow create: if request.auth != null 
        && request.resource.data.ownerId == request.auth.uid
        && request.resource.data.collaborators is list;
        
      // Allow read if user has access (owner or collaborator)
      allow read: if request.auth != null && hasCanvasAccess(canvasId);
      
      // Allow list/query for canvases owned by or shared with the user
      allow list: if request.auth != null && (
        resource.data.ownerId == request.auth.uid ||
        request.auth.uid in resource.data.collaborators
      );
        
      // Allow update if user has access (owner or collaborator)
      allow update: if request.auth != null && hasCanvasAccess(canvasId);
        
      // Allow delete only by canvas owner
      allow delete: if request.auth != null && isCanvasOwner(canvasId);
    }
    
    // Global canvas document - authenticated users can read and write (legacy support)
    match /globalCanvas/{document=**} {
      allow read, write: if request.auth != null;
    }
    
    // Canvas objects - require canvas access
    match /canvasObjects/{objectId} {
      // Allow create if user has access to the canvas
      allow create: if request.auth != null 
        && hasCanvasAccess(request.resource.data.canvasId);
        
      // Allow read if user has access to the canvas
      allow read: if request.auth != null 
        && hasCanvasAccess(resource.data.canvasId);
      
      // Allow list/query if authenticated (will be filtered by canvasId in queries)
      allow list: if request.auth != null;
        
      // Allow update if user has access to the canvas
      allow update: if request.auth != null 
        && hasCanvasAccess(resource.data.canvasId);
        
      // Allow delete if user has access to the canvas
      allow delete: if request.auth != null 
        && hasCanvasAccess(resource.data.canvasId);
    }
    
    // Pending invites collection
    match /pendingInvites/{inviteId} {
      // Allow read if authenticated
      allow read: if request.auth != null;
      
      // Allow list if authenticated
      allow list: if request.auth != null;
      
      // Allow create if authenticated
      allow create: if request.auth != null;
      
      // Allow delete if user is inviter or invitee
      allow delete: if request.auth != null && (
        resource.data.invitedBy == request.auth.uid ||
        resource.data.inviteeEmail == request.auth.token.email
      );
    }
    
    // API Tokens subcollection for users
    match /users/{userId}/apiTokens/{tokenId} {
      // Allow read/write/list/create only for the token owner
      allow read, write, list, create: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow queries on the entire apiTokens collection for the user
    match /users/{userId}/apiTokens {
      // Allow list operations (queries) only for the token owner
      allow list: if request.auth != null && request.auth.uid == userId;
    }
    
    // Agent tokens collection (for easier access)
    match /agentTokens/{uid} {
      allow read, write: if request.auth != null && request.auth.uid == uid;
    }
    
    // Canvas agent status for presence and activity tracking
    match /canvases/{canvasId}/agentStatus/{uid} {
      // Anyone can read agent status for awareness
      allow read: if true;
      // Only the user can write their own agent status
      allow write: if request.auth != null && request.auth.uid == uid;
    }
    
    // Agent presence and activity logs
    match /agentActivity/{activityId} {
      // Allow read for canvas collaborators
      allow read: if request.auth != null;
      // Allow write for authenticated users
      allow create: if request.auth != null;
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
